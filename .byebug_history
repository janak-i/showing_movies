c
@subscription = Subscription.find(params[:id])
c
plan = Plan.find(params[:plan_id])
plan_id
c
user
user = user_data
user_data = decode_data[0]["user_data"] unless !decode_data
decode_data = decode_user_data(request.headers["token"])
c
customer
user_data = decode_data[0]["user_data"] unless !decode_data
decode_data = decode_user_data(request.headers["token"])
c
token = encode_user_data({ user_data: user.id })
user = User.new(email: params[:email], password: params[:password])
c
@plan=Plan.new(plan_params)
c
user = User.new(name: params[:name], email: params[:email], password: params[:password])
c
user = User.new(name: params[:name], email: params[:email], password: params[:password])
c
@plan=Plan.new(plan_params)
c
@user_type=User.find(params[:user_type])
c
token = encode_user_data({ user_data: user.id })
user = User.new(name: params[:name], email: params[:email], password: params[:password])
c
token = encode_user_data({ user_data: user.id })
user = User.new(email: params[:email], password: params[:password])
@current_user
current_user
c
token
toen
@current_user
@current_suer
c
@plan=Plan.new(plan_params)
c
@plans=Plan.all
c
@plan=Plan.new(plan_params)
c
@plans=Plan.all
c
user = User.find_by(email: params[:email])
c
token = encode_user_data({ user_data: user.id })
user = User.new(email: params[:email], password: params[:password])
c
token = encode_user_data({ user_data: user.id })
token
encode_user_data({ user_data: user.id })
user && user.password == params[:password]
user = User.find_by(email: params[:email])
